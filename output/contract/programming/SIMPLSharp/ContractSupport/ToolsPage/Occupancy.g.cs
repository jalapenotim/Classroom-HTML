//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.601.10.0
//     UI Plugin:   1.4201.17.0
//
//     Project:     Classroom
//     Version:     1.0.0.0
//     Sdk:         CH5:2.16.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using Classroom;

namespace Classroom.ToolsPage
{

    /// <summary>
    /// Occupancy
    /// </summary>
    public partial interface IOccupancy 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event ToolsPage.Occupancy.Occ AND Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> OccANDButton_PressEvent;

        /// <summary>
        /// Event ToolsPage.Occupancy.Occ Button 10 Min.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> OccButton10Min_PressEvent;

        /// <summary>
        /// Event ToolsPage.Occupancy.Occ Button 15 Min.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> OccButton15Min_PressEvent;

        /// <summary>
        /// Event ToolsPage.Occupancy.Occ Button 2 Min.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> OccButton2Min_PressEvent;

        /// <summary>
        /// Event ToolsPage.Occupancy.Occ Button 30 Min.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> OccButton30Min_PressEvent;

        /// <summary>
        /// Event ToolsPage.Occupancy.Occ Button 30s.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> OccButton30s_PressEvent;

        /// <summary>
        /// Event ToolsPage.Occupancy.Occ Button 5 Min.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> OccButton5Min_PressEvent;

        /// <summary>
        /// Event ToolsPage.Occupancy.Occ OR Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> OccORButton_PressEvent;

        /// <summary>
        /// Occupancy.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void Occupancy_Visibility_fb(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// Occupancy.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void Occupancy_Visibility_fb(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ AND Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccANDButton_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ AND Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccANDButton_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 10 Min.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccButton10Min_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 10 Min.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccButton10Min_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 15 Min.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccButton15Min_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 15 Min.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccButton15Min_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 2 Min.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccButton2Min_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 2 Min.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccButton2Min_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 30 Min.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccButton30Min_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 30 Min.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccButton30Min_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 30s.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccButton30s_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 30s.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccButton30s_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 5 Min.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccButton5Min_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ Button 5 Min.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccButton5Min_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ OR Button.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccORButton_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ OR Button.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccORButton_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ PIR.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccPIR_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ PIR.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccPIR_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ US-A.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccUSA_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ US-A.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccUSA_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occ US-B.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void OccUSB_Selected(OccupancyBoolInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occ US-B.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void OccUSB_Selected(bool digital);

        /// <summary>
        /// ToolsPage.Occupancy.Occupied Or Vacant Text.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void OccupiedOrVacantText_IndirectRichText(OccupancyStringInputSigDelegate callback);

        /// <summary>
        /// ToolsPage.Occupancy.Occupied Or Vacant Text.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void OccupiedOrVacantText_IndirectRichText(string serial);
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="occupancy">The <see cref="IOccupancy"/> on which to apply the feedback.</param>
    public delegate void OccupancyBoolInputSigDelegate(BoolInputSig boolInputSig, IOccupancy occupancy);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="occupancy">The <see cref="IOccupancy"/> on which to apply the feedback.</param>
    public delegate void OccupancyStringInputSigDelegate(StringInputSig stringInputSig, IOccupancy occupancy);

    /// <summary>
    /// Occupancy
    /// </summary>
    internal partial class Occupancy : IOccupancy, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.Occupancy.OccANDButton.Press
                /// ToolsPage.Occupancy.Occ AND Button.Press
                /// </summary>
                public const uint OccANDButton_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.Occupancy.OccButton10Min.Press
                /// ToolsPage.Occupancy.Occ Button 10 Min.Press
                /// </summary>
                public const uint OccButton10Min_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.Occupancy.OccButton15Min.Press
                /// ToolsPage.Occupancy.Occ Button 15 Min.Press
                /// </summary>
                public const uint OccButton15Min_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.Occupancy.OccButton2Min.Press
                /// ToolsPage.Occupancy.Occ Button 2 Min.Press
                /// </summary>
                public const uint OccButton2Min_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.Occupancy.OccButton30Min.Press
                /// ToolsPage.Occupancy.Occ Button 30 Min.Press
                /// </summary>
                public const uint OccButton30Min_PressEvent = 6;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.Occupancy.OccButton30s.Press
                /// ToolsPage.Occupancy.Occ Button 30s.Press
                /// </summary>
                public const uint OccButton30s_PressEvent = 7;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.Occupancy.OccButton5Min.Press
                /// ToolsPage.Occupancy.Occ Button 5 Min.Press
                /// </summary>
                public const uint OccButton5Min_PressEvent = 8;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.Occupancy.OccORButton.Press
                /// ToolsPage.Occupancy.Occ OR Button.Press
                /// </summary>
                public const uint OccORButton_PressEvent = 9;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.Visibility_fb
                /// Occupancy.Visibility
                /// </summary>
                public const uint Occupancy_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccANDButton.Selected
                /// ToolsPage.Occupancy.Occ AND Button.Selected
                /// </summary>
                public const uint OccANDButton_SelectedState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccButton10Min.Selected
                /// ToolsPage.Occupancy.Occ Button 10 Min.Selected
                /// </summary>
                public const uint OccButton10Min_SelectedState = 4;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccButton15Min.Selected
                /// ToolsPage.Occupancy.Occ Button 15 Min.Selected
                /// </summary>
                public const uint OccButton15Min_SelectedState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccButton2Min.Selected
                /// ToolsPage.Occupancy.Occ Button 2 Min.Selected
                /// </summary>
                public const uint OccButton2Min_SelectedState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccButton30Min.Selected
                /// ToolsPage.Occupancy.Occ Button 30 Min.Selected
                /// </summary>
                public const uint OccButton30Min_SelectedState = 7;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccButton30s.Selected
                /// ToolsPage.Occupancy.Occ Button 30s.Selected
                /// </summary>
                public const uint OccButton30s_SelectedState = 8;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccButton5Min.Selected
                /// ToolsPage.Occupancy.Occ Button 5 Min.Selected
                /// </summary>
                public const uint OccButton5Min_SelectedState = 9;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccORButton.Selected
                /// ToolsPage.Occupancy.Occ OR Button.Selected
                /// </summary>
                public const uint OccORButton_SelectedState = 10;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccPIR.Selected
                /// ToolsPage.Occupancy.Occ PIR.Selected
                /// </summary>
                public const uint OccPIR_SelectedState = 11;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccUSA.Selected
                /// ToolsPage.Occupancy.Occ US-A.Selected
                /// </summary>
                public const uint OccUSA_SelectedState = 12;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.Occupancy.OccUSB.Selected
                /// ToolsPage.Occupancy.Occ US-B.Selected
                /// </summary>
                public const uint OccUSB_SelectedState = 13;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: ToolsPage.Occupancy.OccupiedOrVacantText.IndirectRichText
                /// ToolsPage.Occupancy.Occupied Or Vacant Text.Indirect Rich Text
                /// </summary>
                public const uint OccupiedOrVacantText_IndirectRichTextState = 1;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="Occupancy"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal Occupancy(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Occupancy"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal Occupancy(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="Occupancy"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.OccANDButton_PressEvent, onOccANDButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.OccButton10Min_PressEvent, onOccButton10Min_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.OccButton15Min_PressEvent, onOccButton15Min_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.OccButton2Min_PressEvent, onOccButton2Min_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.OccButton30Min_PressEvent, onOccButton30Min_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.OccButton30s_PressEvent, onOccButton30s_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.OccButton5Min_PressEvent, onOccButton5Min_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.OccORButton_PressEvent, onOccORButton_Press);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> OccANDButton_PressEvent;
        private void onOccANDButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = OccANDButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> OccButton10Min_PressEvent;
        private void onOccButton10Min_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = OccButton10Min_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> OccButton15Min_PressEvent;
        private void onOccButton15Min_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = OccButton15Min_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> OccButton2Min_PressEvent;
        private void onOccButton2Min_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = OccButton2Min_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> OccButton30Min_PressEvent;
        private void onOccButton30Min_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = OccButton30Min_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> OccButton30s_PressEvent;
        private void onOccButton30s_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = OccButton30s_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> OccButton5Min_PressEvent;
        private void onOccButton5Min_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = OccButton5Min_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> OccORButton_PressEvent;
        private void onOccORButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = OccORButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void OccANDButton_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccANDButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccANDButton_Selected(bool digital)
        {
            OccANDButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void OccButton10Min_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccButton10Min_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccButton10Min_Selected(bool digital)
        {
            OccButton10Min_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void OccButton15Min_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccButton15Min_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccButton15Min_Selected(bool digital)
        {
            OccButton15Min_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void OccButton2Min_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccButton2Min_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccButton2Min_Selected(bool digital)
        {
            OccButton2Min_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void OccButton30Min_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccButton30Min_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccButton30Min_Selected(bool digital)
        {
            OccButton30Min_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void OccButton30s_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccButton30s_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccButton30s_Selected(bool digital)
        {
            OccButton30s_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void OccButton5Min_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccButton5Min_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccButton5Min_Selected(bool digital)
        {
            OccButton5Min_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void OccORButton_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccORButton_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccORButton_Selected(bool digital)
        {
            OccORButton_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void OccPIR_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccPIR_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccPIR_Selected(bool digital)
        {
            OccPIR_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void Occupancy_Visibility_fb(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.Occupancy_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void Occupancy_Visibility_fb(bool digital)
        {
            Occupancy_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void OccUSA_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccUSA_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccUSA_Selected(bool digital)
        {
            OccUSA_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void OccUSB_Selected(OccupancyBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.OccUSB_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void OccUSB_Selected(bool digital)
        {
            OccUSB_Selected((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void OccupiedOrVacantText_IndirectRichText(OccupancyStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.OccupiedOrVacantText_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void OccupiedOrVacantText_IndirectRichText(string serial)
        {
            OccupiedOrVacantText_IndirectRichText((sig, component) => sig.StringValue = serial);
        }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "Occupancy", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            OccANDButton_PressEvent = null;
            OccButton10Min_PressEvent = null;
            OccButton15Min_PressEvent = null;
            OccButton2Min_PressEvent = null;
            OccButton30Min_PressEvent = null;
            OccButton30s_PressEvent = null;
            OccButton5Min_PressEvent = null;
            OccORButton_PressEvent = null;
        }

        #endregion
    }
}
