//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.501.6.0
//     UI Plugin:   1.4101.18.0
//
//     Project:     Classroom
//     Version:     1.0.0.0
//     Sdk:         CH5:2.15.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using Classroom;

namespace Classroom.ToolsPage
{

    /// <summary>
    /// Tools-Page
    /// </summary>
    public partial interface IToolsPage 
    {
        object UserObject { get; set; }

        /// <summary>
        /// Event Display Button 1.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> DisplayButton1_PressEvent;

        /// <summary>
        /// Event Display Button 2.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> DisplayButton2_PressEvent;

        /// <summary>
        /// Event Main Page Button.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> MainPageButton_PressEvent;

        /// <summary>
        /// Event Power Off Button Tools.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> PowerOffButtonTools_PressEvent;

        /// <summary>
        /// Event Power On Button Tools.Press (from panel to Control System)
        /// </summary>
        event EventHandler<UIEventArgs> PowerOnButtonTools_PressEvent;

        /// <summary>
        /// Display Button 1.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayButton1_Visibility_fb(ToolsPageBoolInputSigDelegate callback);

        /// <summary>
        /// Display Button 1.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayButton1_Visibility_fb(bool digital);

        /// <summary>
        /// Display Button 2.Visibility Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayButton2_Visibility_fb(ToolsPageBoolInputSigDelegate callback);

        /// <summary>
        /// Display Button 2.Visibility Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayButton2_Visibility_fb(bool digital);

        /// <summary>
        /// Tools-Page.VisibilityJoin Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void ToolsPage_VisibilityJoin(ToolsPageBoolInputSigDelegate callback);

        /// <summary>
        /// Tools-Page.VisibilityJoin Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void ToolsPage_VisibilityJoin(bool digital);

        /// <summary>
        /// Display Button 1.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayButton1_Selected(ToolsPageBoolInputSigDelegate callback);

        /// <summary>
        /// Display Button 1.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayButton1_Selected(bool digital);

        /// <summary>
        /// Display Button 2.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void DisplayButton2_Selected(ToolsPageBoolInputSigDelegate callback);

        /// <summary>
        /// Display Button 2.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void DisplayButton2_Selected(bool digital);

        /// <summary>
        /// Power Off Button Tools.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void PowerOffButtonTools_Selected(ToolsPageBoolInputSigDelegate callback);

        /// <summary>
        /// Power Off Button Tools.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void PowerOffButtonTools_Selected(bool digital);

        /// <summary>
        /// Power On Button Tools.Selected Feedback
        /// </summary>
        /// <param name="callback">The bool delegate to update the panel.</param>
        void PowerOnButtonTools_Selected(ToolsPageBoolInputSigDelegate callback);

        /// <summary>
        /// Power On Button Tools.Selected Feedback
        /// </summary>
        /// <param name="digital">The bool to update the panel.</param>
        void PowerOnButtonTools_Selected(bool digital);

        /// <summary>
        /// Display Button 1.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void DisplayButton1_IndirectRichText(ToolsPageStringInputSigDelegate callback);

        /// <summary>
        /// Display Button 1.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void DisplayButton1_IndirectRichText(string serial);

        /// <summary>
        /// Display Button 2.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void DisplayButton2_IndirectRichText(ToolsPageStringInputSigDelegate callback);

        /// <summary>
        /// Display Button 2.Indirect Rich Text Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void DisplayButton2_IndirectRichText(string serial);

        /// <summary>
        /// Screen Resolution.Indirect Feedback
        /// </summary>
        /// <param name="callback">The <see cref="string"/> delegate to update the panel.</param>
        void ScreenResolution_Indirect(ToolsPageStringInputSigDelegate callback);

        /// <summary>
        /// Screen Resolution.Indirect Feedback
        /// </summary>
        /// <param name="serial">The <see cref="string"/> to update the panel.</param>
        void ScreenResolution_Indirect(string serial);

        /// <summary>
        /// ComplexComponent Projector Hours
        /// </summary>
        Classroom.ToolsPage.IProjectorHours ProjectorHours { get; }

        /// <summary>
        /// ComplexComponent Occupancy
        /// </summary>
        Classroom.ToolsPage.IOccupancy Occupancy { get; }
    }

    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="boolInputSig">The <see cref="BoolInputSig"/> joinInfo data.</param>
    /// <param name="toolspage">The <see cref="IToolsPage"/> on which to apply the feedback.</param>
    public delegate void ToolsPageBoolInputSigDelegate(BoolInputSig boolInputSig, IToolsPage toolspage);
    /// <summary>
    /// Digital callback used in feedback events.
    /// </summary>
    /// <param name="stringInputSig">The <see cref="StringInputSig"/> joinInfo data.</param>
    /// <param name="toolspage">The <see cref="IToolsPage"/> on which to apply the feedback.</param>
    public delegate void ToolsPageStringInputSigDelegate(StringInputSig stringInputSig, IToolsPage toolspage);

    /// <summary>
    /// Tools-Page
    /// </summary>
    internal partial class ToolsPage : IToolsPage, IDisposable
    {
        #region Standard CH5 Component members

        private ComponentMediator ComponentMediator { get; set; }

        public object UserObject { get; set; }

        /// <summary>
        /// Gets the ControlJoinId a.k.a. SmartObjectId.  This Id identifies the extender symbol.
        /// </summary>
        public uint ControlJoinId { get; private set; }

        private IList<BasicTriListWithSmartObject> _devices;

        /// <summary>
        /// Gets the list of devices.
        /// </summary>
        public IList<BasicTriListWithSmartObject> Devices { get { return _devices; } }

        #endregion

        #region Joins

        private static class Joins
        {
            /// <summary>
            /// Digital signals,
            /// </summary>
            internal static class Booleans
            {
                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.DisplayButton1.Press
                /// Display Button 1.Press
                /// </summary>
                public const uint DisplayButton1_PressEvent = 2;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.DisplayButton2.Press
                /// Display Button 2.Press
                /// </summary>
                public const uint DisplayButton2_PressEvent = 3;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.MainPageButton.Press
                /// Main Page Button.Press
                /// </summary>
                public const uint MainPageButton_PressEvent = 4;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.PowerOffButtonTools.Press
                /// Power Off Button Tools.Press
                /// </summary>
                public const uint PowerOffButtonTools_PressEvent = 5;

                /// <summary>
                /// Output or Event digital joinInfo from panel to Control System: ToolsPage.PowerOnButtonTools.Press
                /// Power On Button Tools.Press
                /// </summary>
                public const uint PowerOnButtonTools_PressEvent = 6;


                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.DisplayButton1.Visibility_fb
                /// Display Button 1.Visibility
                /// </summary>
                public const uint DisplayButton1_Visibility_fbState = 1;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.DisplayButton2.Visibility_fb
                /// Display Button 2.Visibility
                /// </summary>
                public const uint DisplayButton2_Visibility_fbState = 2;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPageVisibilityJoin
                /// Tools-Page.VisibilityJoin
                /// </summary>
                public const uint ToolsPage_VisibilityJoinState = 3;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.DisplayButton1.Selected
                /// Display Button 1.Selected
                /// </summary>
                public const uint DisplayButton1_SelectedState = 5;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.DisplayButton2.Selected
                /// Display Button 2.Selected
                /// </summary>
                public const uint DisplayButton2_SelectedState = 6;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.PowerOffButtonTools.Selected
                /// Power Off Button Tools.Selected
                /// </summary>
                public const uint PowerOffButtonTools_SelectedState = 7;

                /// <summary>
                /// Input or Feedback digital joinInfo from Control System to panel: ToolsPage.PowerOnButtonTools.Selected
                /// Power On Button Tools.Selected
                /// </summary>
                public const uint PowerOnButtonTools_SelectedState = 8;

            }
            /// <summary>
            /// Serial signals.
            /// </summary>
            internal static class Strings
            {

                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: ToolsPage.DisplayButton1.IndirectRichText
                /// Display Button 1.Indirect Rich Text
                /// </summary>
                public const uint DisplayButton1_IndirectRichTextState = 1;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: ToolsPage.DisplayButton2.IndirectRichText
                /// Display Button 2.Indirect Rich Text
                /// </summary>
                public const uint DisplayButton2_IndirectRichTextState = 2;
                /// <summary>
                /// Input or Feedback serial joinInfo from Control System to panel: ToolsPage.ScreenResolution.Indirect
                /// Screen Resolution.Indirect
                /// </summary>
                public const uint ScreenResolution_IndirectState = 3;
            }
        }

        #endregion

        #region Construction and Initialization

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsPage"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        internal ToolsPage(ComponentMediator componentMediator, uint controlJoinId, uint? itemCount)
        {
            ComponentMediator = componentMediator;
            Initialize(controlJoinId, itemCount);
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsPage"/> component class.
        /// </summary>
        /// <param name="componentMediator">The <see cref="ComponentMediator"/> used to instantiate the component.</param>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        internal ToolsPage(ComponentMediator componentMediator, uint controlJoinId) : this(componentMediator, controlJoinId, null)
        {
        }

        /// <summary>
        /// Initializes a new instance with default itemCount.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        private void Initialize(uint controlJoinId)
        {
            Initialize(controlJoinId, null);
        }

        private Dictionary<string, Indexes> _indexLookup = new Dictionary<string, Indexes>();

        /// <summary>
        /// Initializes a new instance of the <see cref="ToolsPage"/> component class.
        /// </summary>
        /// <param name="controlJoinId">The SmartObjectId at which to create the component.</param>
        /// <param name="itemCount">The number of items.</param>
        private void Initialize(uint controlJoinId, uint? itemCount)
        {
            ControlJoinId = controlJoinId; 
 
            _devices = new List<BasicTriListWithSmartObject>(); 
 
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.DisplayButton1_PressEvent, onDisplayButton1_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.DisplayButton2_PressEvent, onDisplayButton2_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.MainPageButton_PressEvent, onMainPageButton_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.PowerOffButtonTools_PressEvent, onPowerOffButtonTools_Press);
            ComponentMediator.ConfigureBooleanEvent(controlJoinId, Joins.Booleans.PowerOnButtonTools_PressEvent, onPowerOnButtonTools_Press);
            ProjectorHours = new Classroom.ToolsPage.ProjectorHours(ComponentMediator, 12);
            Occupancy = new Classroom.ToolsPage.Occupancy(ComponentMediator, 13);
        }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            Devices.Add(device);
            ComponentMediator.HookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((Classroom.ToolsPage.ProjectorHours)ProjectorHours).AddDevice(device);

            ((Classroom.ToolsPage.Occupancy)Occupancy).AddDevice(device);
        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            Devices.Remove(device);
            ComponentMediator.UnHookSmartObjectEvents(device.SmartObjects[ControlJoinId]);

            ((Classroom.ToolsPage.ProjectorHours)ProjectorHours).RemoveDevice(device);

            ((Classroom.ToolsPage.Occupancy)Occupancy).RemoveDevice(device);
        }

        #endregion

        #region CH5 Contract

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> DisplayButton1_PressEvent;
        private void onDisplayButton1_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = DisplayButton1_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> DisplayButton2_PressEvent;
        private void onDisplayButton2_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = DisplayButton2_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> MainPageButton_PressEvent;
        private void onMainPageButton_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = MainPageButton_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> PowerOffButtonTools_PressEvent;
        private void onPowerOffButtonTools_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = PowerOffButtonTools_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public event EventHandler<UIEventArgs> PowerOnButtonTools_PressEvent;
        private void onPowerOnButtonTools_Press(SmartObjectEventArgs eventArgs)
        {
            EventHandler<UIEventArgs> handler = PowerOnButtonTools_PressEvent;
            if (handler != null)
                handler(this, UIEventArgs.CreateEventArgs(eventArgs));
        }

        /// <inheritdoc/>
        public void DisplayButton1_Selected(ToolsPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayButton1_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton1_Selected(bool digital)
        {
            DisplayButton1_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayButton1_Visibility_fb(ToolsPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayButton1_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton1_Visibility_fb(bool digital)
        {
            DisplayButton1_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayButton2_Selected(ToolsPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayButton2_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton2_Selected(bool digital)
        {
            DisplayButton2_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void DisplayButton2_Visibility_fb(ToolsPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.DisplayButton2_Visibility_fbState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton2_Visibility_fb(bool digital)
        {
            DisplayButton2_Visibility_fb((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void PowerOffButtonTools_Selected(ToolsPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.PowerOffButtonTools_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void PowerOffButtonTools_Selected(bool digital)
        {
            PowerOffButtonTools_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void PowerOnButtonTools_Selected(ToolsPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.PowerOnButtonTools_SelectedState], this);
            }
        }

        /// <inheritdoc/>
        public void PowerOnButtonTools_Selected(bool digital)
        {
            PowerOnButtonTools_Selected((sig, component) => sig.BoolValue = digital);
        }
        /// <inheritdoc/>
        public void ToolsPage_VisibilityJoin(ToolsPageBoolInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].BooleanInput[Joins.Booleans.ToolsPage_VisibilityJoinState], this);
            }
        }

        /// <inheritdoc/>
        public void ToolsPage_VisibilityJoin(bool digital)
        {
            ToolsPage_VisibilityJoin((sig, component) => sig.BoolValue = digital);
        }


        /// <inheritdoc/>
        public void DisplayButton1_IndirectRichText(ToolsPageStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.DisplayButton1_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton1_IndirectRichText(string serial)
        {
            DisplayButton1_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void DisplayButton2_IndirectRichText(ToolsPageStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.DisplayButton2_IndirectRichTextState], this);
            }
        }

        /// <inheritdoc/>
        public void DisplayButton2_IndirectRichText(string serial)
        {
            DisplayButton2_IndirectRichText((sig, component) => sig.StringValue = serial);
        }
        /// <inheritdoc/>
        public void ScreenResolution_Indirect(ToolsPageStringInputSigDelegate callback)
        {
            for (int index = 0; index < Devices.Count; index++)
            {
                callback(Devices[index].SmartObjects[ControlJoinId].StringInput[Joins.Strings.ScreenResolution_IndirectState], this);
            }
        }

        /// <inheritdoc/>
        public void ScreenResolution_Indirect(string serial)
        {
            ScreenResolution_Indirect((sig, component) => sig.StringValue = serial);
        }

        /// <summary>
        /// ComplexComponent ProjectorHours
        /// </summary>
        public Classroom.ToolsPage.IProjectorHours ProjectorHours { get; private set; }

        /// <summary>
        /// ComplexComponent Occupancy
        /// </summary>
        public Classroom.ToolsPage.IOccupancy Occupancy { get; private set; }

        #endregion

        #region Overrides

        public override int GetHashCode()
        {
            return (int)ControlJoinId;
        }

        public override string ToString()
        {
            return string.Format("Contract: {0} Component: {1} HashCode: {2} {3}", "ToolsPage", GetType().Name, GetHashCode(), UserObject != null ? "UserObject: " + UserObject : null);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            DisplayButton1_PressEvent = null;
            DisplayButton2_PressEvent = null;
            MainPageButton_PressEvent = null;
            PowerOffButtonTools_PressEvent = null;
            PowerOnButtonTools_PressEvent = null;
        }

        #endregion
    }
}
