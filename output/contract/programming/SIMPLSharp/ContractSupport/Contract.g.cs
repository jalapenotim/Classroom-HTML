//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by CrestronConstruct.
//     AppHost:     2.501.6.0
//     UI Plugin:   1.4101.18.0
//
//     Project:     Classroom
//     Version:     1.0.0.0
//     Sdk:         CH5:2.15.0
//     Strategy:    Modern
//     IndexOnly:   False
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Crestron.SimplSharp;
using Crestron.SimplSharpPro;
using Crestron.SimplSharpPro.DeviceSupport;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Classroom
{
    /// <summary>
    /// Common Interface for Root Contracts.
    /// </summary>
    public interface IContract
    {
        object UserObject { get; set; }
        void AddDevice(BasicTriListWithSmartObject device);
        void RemoveDevice(BasicTriListWithSmartObject device);

        /// <summary>
        /// Fires on ANY activity on the panel.
        /// </summary>
        event EventHandler<EventArgs> Activity;
    }

    /// <summary>
    /// Root contract giving access to top level project items such as Pages and global Widgets.
    /// </summary>
    public sealed class Contract : IContract, IDisposable
    {
        #region Components

        private ComponentMediator ComponentMediator { get; set; }

        public Classroom.Main.IMain Main { get { return (Classroom.Main.IMain)InternalMain; } }
        private Classroom.Main.Main InternalMain { get; set; }

        public Classroom.ToolsPage.IToolsPage ToolsPage { get { return (Classroom.ToolsPage.IToolsPage)InternalToolsPage; } }
        private Classroom.ToolsPage.ToolsPage InternalToolsPage { get; set; }

        public Classroom.ILockedPage LockedPage { get { return (Classroom.ILockedPage)InternalLockedPage; } }
        private Classroom.LockedPage InternalLockedPage { get; set; }

        #endregion

        #region Construction and Initialization

        public Contract()
            : this(new List<BasicTriListWithSmartObject>().ToArray())
        {
        }

        public Contract(BasicTriListWithSmartObject device)
            : this(new [] { device })
        {
        }

        public Contract(BasicTriListWithSmartObject[] devices)
        {
            if (devices == null)
                throw new ArgumentNullException("Devices is null");

            ComponentMediator = new ComponentMediator();
            ComponentMediator.ConfigureActivityEvent(onActivity);

            InternalMain = new Classroom.Main.Main(ComponentMediator, 1);

            InternalToolsPage = new Classroom.ToolsPage.ToolsPage(ComponentMediator, 10);

            InternalLockedPage = new Classroom.LockedPage(ComponentMediator, 14);


            for (int index = 0; index < devices.Length; index++)
            {
                AddDevice(devices[index]);
            }
        }

        /// <summary>
        /// Fires on ANY activity on the panel.
        /// </summary>
        public event EventHandler<EventArgs> Activity;
        private void onActivity(GenericBase currentDevice, SmartObjectEventArgs args)
        {
            var handler = Activity;
            if (handler != null)
                handler(currentDevice, args);
        }
        #endregion

        #region Standard Contract Members

        public object UserObject { get; set; }

        public void AddDevice(BasicTriListWithSmartObject device)
        {
            InternalMain.AddDevice(device);
            InternalToolsPage.AddDevice(device);
            InternalLockedPage.AddDevice(device);

        }

        public void RemoveDevice(BasicTriListWithSmartObject device)
        {
            InternalMain.RemoveDevice(device);
            InternalToolsPage.RemoveDevice(device);
            InternalLockedPage.RemoveDevice(device);
        }

        #endregion

        #region IDisposable

        public bool IsDisposed { get; set; }

        public void Dispose()
        {
            if (IsDisposed)
                return;

            IsDisposed = true;

            InternalMain.Dispose();
            InternalToolsPage.Dispose();
            InternalLockedPage.Dispose();

            ComponentMediator.Dispose(); 
        }

        #endregion
    }
}

